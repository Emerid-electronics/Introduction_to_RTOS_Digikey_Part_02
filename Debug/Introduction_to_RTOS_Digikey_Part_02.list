
Introduction_to_RTOS_Digikey_Part_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001db4  08001db4  00011db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dfc  08001dfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001dfc  08001dfc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dfc  08001dfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dfc  08001dfc  00011dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e00  08001e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001e10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001e10  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8e8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186e  00000000  00000000  0002b924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002d198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025689  00000000  00000000  0002e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba69  00000000  00000000  00053d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea3bc  00000000  00000000  0005f802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149bbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da4  00000000  00000000  00149c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d9c 	.word	0x08001d9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001d9c 	.word	0x08001d9c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f99f 	bl	800050e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f803 	bl	80001da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f848 	bl	8000268 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <main+0x10>

080001da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	b096      	sub	sp, #88	; 0x58
 80001de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2244      	movs	r2, #68	; 0x44
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fdcf 	bl	8001d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ee:	463b      	mov	r3, r7
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80001fc:	2310      	movs	r3, #16
 80001fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000204:	2300      	movs	r3, #0
 8000206:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000208:	2360      	movs	r3, #96	; 0x60
 800020a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800020c:	2300      	movs	r3, #0
 800020e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fcbb 	bl	8000b90 <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000220:	f000 f864 	bl	80002ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000228:	2300      	movs	r3, #0
 800022a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000238:	463b      	mov	r3, r7
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f001 f88d 	bl	800135c <HAL_RCC_ClockConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000248:	f000 f850 	bl	80002ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800024c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000250:	f000 fc48 	bl	8000ae4 <HAL_PWREx_ControlVoltageScaling>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x84>
  {
    Error_Handler();
 800025a:	f000 f847 	bl	80002ec <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3758      	adds	r7, #88	; 0x58
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MX_GPIO_Init+0x5c>)
 800027e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000280:	4a10      	ldr	r2, [pc, #64]	; (80002c4 <MX_GPIO_Init+0x5c>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_GPIO_Init+0x5c>)
 800028a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	603b      	str	r3, [r7, #0]
 8000292:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_2_GPIO_Port, LD_2_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2120      	movs	r1, #32
 8000298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029c:	f000 fbfc 	bl	8000a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD_2_Pin */
  GPIO_InitStruct.Pin = LD_2_Pin;
 80002a0:	2320      	movs	r3, #32
 80002a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD_2_GPIO_Port, &GPIO_InitStruct);
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4619      	mov	r1, r3
 80002b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b8:	f000 fa44 	bl	8000744 <HAL_GPIO_Init>

}
 80002bc:	bf00      	nop
 80002be:	3718      	adds	r7, #24
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40021000 	.word	0x40021000

080002c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d101      	bne.n	80002de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002da:	f000 f931 	bl	8000540 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40001000 	.word	0x40001000

080002ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
}
 80002f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <Error_Handler+0x8>
	...

080002f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <HAL_MspInit+0x44>)
 8000300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <HAL_MspInit+0x44>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6613      	str	r3, [r2, #96]	; 0x60
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <HAL_MspInit+0x44>)
 800030c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <HAL_MspInit+0x44>)
 8000318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800031a:	4a08      	ldr	r2, [pc, #32]	; (800033c <HAL_MspInit+0x44>)
 800031c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000320:	6593      	str	r3, [r2, #88]	; 0x58
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <HAL_MspInit+0x44>)
 8000324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08c      	sub	sp, #48	; 0x30
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000350:	2200      	movs	r2, #0
 8000352:	6879      	ldr	r1, [r7, #4]
 8000354:	2036      	movs	r0, #54	; 0x36
 8000356:	f000 f9cb 	bl	80006f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800035a:	2036      	movs	r0, #54	; 0x36
 800035c:	f000 f9e4 	bl	8000728 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <HAL_InitTick+0x9c>)
 8000362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000364:	4a1d      	ldr	r2, [pc, #116]	; (80003dc <HAL_InitTick+0x9c>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6593      	str	r3, [r2, #88]	; 0x58
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <HAL_InitTick+0x9c>)
 800036e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000378:	f107 0210 	add.w	r2, r7, #16
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4611      	mov	r1, r2
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f97a 	bl	800167c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000388:	f001 f962 	bl	8001650 <HAL_RCC_GetPCLK1Freq>
 800038c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800038e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <HAL_InitTick+0xa0>)
 8000392:	fba2 2303 	umull	r2, r3, r2, r3
 8000396:	0c9b      	lsrs	r3, r3, #18
 8000398:	3b01      	subs	r3, #1
 800039a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <HAL_InitTick+0xa4>)
 800039e:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <HAL_InitTick+0xa8>)
 80003a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <HAL_InitTick+0xa4>)
 80003a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80003aa:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <HAL_InitTick+0xa4>)
 80003ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <HAL_InitTick+0xa4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <HAL_InitTick+0xa4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80003bc:	4809      	ldr	r0, [pc, #36]	; (80003e4 <HAL_InitTick+0xa4>)
 80003be:	f001 f9ef 	bl	80017a0 <HAL_TIM_Base_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d104      	bne.n	80003d2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80003c8:	4806      	ldr	r0, [pc, #24]	; (80003e4 <HAL_InitTick+0xa4>)
 80003ca:	f001 fa4b 	bl	8001864 <HAL_TIM_Base_Start_IT>
 80003ce:	4603      	mov	r3, r0
 80003d0:	e000      	b.n	80003d4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3730      	adds	r7, #48	; 0x30
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	431bde83 	.word	0x431bde83
 80003e4:	20000028 	.word	0x20000028
 80003e8:	40001000 	.word	0x40001000

080003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <NMI_Handler+0x4>

080003f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <HardFault_Handler+0x4>

080003f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <MemManage_Handler+0x4>

080003fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000402:	e7fe      	b.n	8000402 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <UsageFault_Handler+0x4>

0800040a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000448:	4802      	ldr	r0, [pc, #8]	; (8000454 <TIM6_DAC_IRQHandler+0x10>)
 800044a:	f001 fa7b 	bl	8001944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000028 	.word	0x20000028

08000458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <SystemInit+0x5c>)
 800045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000462:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <SystemInit+0x5c>)
 8000464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <SystemInit+0x60>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <SystemInit+0x60>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <SystemInit+0x60>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <SystemInit+0x60>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <SystemInit+0x60>)
 8000484:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000488:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800048c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <SystemInit+0x60>)
 8000490:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000494:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <SystemInit+0x60>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <SystemInit+0x60>)
 800049c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80004a2:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <SystemInit+0x60>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00
 80004b8:	40021000 	.word	0x40021000

080004bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c0:	f7ff ffca 	bl	8000458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004c6:	e003      	b.n	80004d0 <LoopCopyDataInit>

080004c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004ce:	3104      	adds	r1, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004d0:	480a      	ldr	r0, [pc, #40]	; (80004fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004d8:	d3f6      	bcc.n	80004c8 <CopyDataInit>
	ldr	r2, =_sbss
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004dc:	e002      	b.n	80004e4 <LoopFillZerobss>

080004de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004e0:	f842 3b04 	str.w	r3, [r2], #4

080004e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <LoopForever+0x16>)
	cmp	r2, r3
 80004e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004e8:	d3f9      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ea:	f001 fc2b 	bl	8001d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ee:	f7ff fe6b 	bl	80001c8 <main>

080004f2 <LoopForever>:

LoopForever:
    b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80004f8:	08001e04 	.word	0x08001e04
	ldr	r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000500:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000504:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000508:	20000078 	.word	0x20000078

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>

0800050e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000514:	2300      	movs	r3, #0
 8000516:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f8de 	bl	80006da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff ff0e 	bl	8000340 <HAL_InitTick>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	e001      	b.n	8000534 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000530:	f7ff fee2 	bl	80002f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000534:	79fb      	ldrb	r3, [r7, #7]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_IncTick+0x20>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x24>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4413      	add	r3, r2
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <HAL_IncTick+0x24>)
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000008 	.word	0x20000008
 8000564:	20000074 	.word	0x20000074

08000568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return uwTick;
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <HAL_GetTick+0x14>)
 800056e:	681b      	ldr	r3, [r3, #0]
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000074 	.word	0x20000074

08000580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b2:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	60d3      	str	r3, [r2, #12]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	f003 0307 	and.w	r3, r3, #7
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db0b      	blt.n	800060e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 021f 	and.w	r2, r3, #31
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <__NVIC_EnableIRQ+0x38>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	095b      	lsrs	r3, r3, #5
 8000604:	2001      	movs	r0, #1
 8000606:	fa00 f202 	lsl.w	r2, r0, r2
 800060a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000e100 	.word	0xe000e100

08000620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	db0a      	blt.n	800064a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	b2da      	uxtb	r2, r3
 8000638:	490c      	ldr	r1, [pc, #48]	; (800066c <__NVIC_SetPriority+0x4c>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	0112      	lsls	r2, r2, #4
 8000640:	b2d2      	uxtb	r2, r2
 8000642:	440b      	add	r3, r1
 8000644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000648:	e00a      	b.n	8000660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4908      	ldr	r1, [pc, #32]	; (8000670 <__NVIC_SetPriority+0x50>)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	f003 030f 	and.w	r3, r3, #15
 8000656:	3b04      	subs	r3, #4
 8000658:	0112      	lsls	r2, r2, #4
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	440b      	add	r3, r1
 800065e:	761a      	strb	r2, [r3, #24]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000e100 	.word	0xe000e100
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000674:	b480      	push	{r7}
 8000676:	b089      	sub	sp, #36	; 0x24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	f1c3 0307 	rsb	r3, r3, #7
 800068e:	2b04      	cmp	r3, #4
 8000690:	bf28      	it	cs
 8000692:	2304      	movcs	r3, #4
 8000694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3304      	adds	r3, #4
 800069a:	2b06      	cmp	r3, #6
 800069c:	d902      	bls.n	80006a4 <NVIC_EncodePriority+0x30>
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	e000      	b.n	80006a6 <NVIC_EncodePriority+0x32>
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43da      	mvns	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	401a      	ands	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006bc:	f04f 31ff 	mov.w	r1, #4294967295
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	fa01 f303 	lsl.w	r3, r1, r3
 80006c6:	43d9      	mvns	r1, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	4313      	orrs	r3, r2
         );
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3724      	adds	r7, #36	; 0x24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff4c 	bl	8000580 <__NVIC_SetPriorityGrouping>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000702:	f7ff ff61 	bl	80005c8 <__NVIC_GetPriorityGrouping>
 8000706:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	6978      	ldr	r0, [r7, #20]
 800070e:	f7ff ffb1 	bl	8000674 <NVIC_EncodePriority>
 8000712:	4602      	mov	r2, r0
 8000714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff80 	bl	8000620 <__NVIC_SetPriority>
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff54 	bl	80005e4 <__NVIC_EnableIRQ>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000752:	e17f      	b.n	8000a54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	2101      	movs	r1, #1
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	4013      	ands	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	f000 8171 	beq.w	8000a4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d00b      	beq.n	800078c <HAL_GPIO_Init+0x48>
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d007      	beq.n	800078c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000780:	2b11      	cmp	r3, #17
 8000782:	d003      	beq.n	800078c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b12      	cmp	r3, #18
 800078a:	d130      	bne.n	80007ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	2203      	movs	r2, #3
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	693a      	ldr	r2, [r7, #16]
 80007ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007c2:	2201      	movs	r2, #1
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	4013      	ands	r3, r2
 80007d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	091b      	lsrs	r3, r3, #4
 80007d8:	f003 0201 	and.w	r2, r3, #1
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f003 0303 	and.w	r3, r3, #3
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d118      	bne.n	800082c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000800:	2201      	movs	r2, #1
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	f003 0201 	and.w	r2, r3, #1
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	4313      	orrs	r3, r2
 8000824:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	2203      	movs	r2, #3
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	689a      	ldr	r2, [r3, #8]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	4313      	orrs	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2b02      	cmp	r3, #2
 8000862:	d003      	beq.n	800086c <HAL_GPIO_Init+0x128>
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b12      	cmp	r3, #18
 800086a:	d123      	bne.n	80008b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	08da      	lsrs	r2, r3, #3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3208      	adds	r2, #8
 8000874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000878:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	f003 0307 	and.w	r3, r3, #7
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	220f      	movs	r2, #15
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	691a      	ldr	r2, [r3, #16]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	08da      	lsrs	r2, r3, #3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3208      	adds	r2, #8
 80008ae:	6939      	ldr	r1, [r7, #16]
 80008b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	2203      	movs	r2, #3
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0203 	and.w	r2, r3, #3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4313      	orrs	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	f000 80ac 	beq.w	8000a4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <HAL_GPIO_Init+0x330>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	4a5e      	ldr	r2, [pc, #376]	; (8000a74 <HAL_GPIO_Init+0x330>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6613      	str	r3, [r2, #96]	; 0x60
 8000902:	4b5c      	ldr	r3, [pc, #368]	; (8000a74 <HAL_GPIO_Init+0x330>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800090e:	4a5a      	ldr	r2, [pc, #360]	; (8000a78 <HAL_GPIO_Init+0x334>)
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	3302      	adds	r3, #2
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	f003 0303 	and.w	r3, r3, #3
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	220f      	movs	r2, #15
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000938:	d025      	beq.n	8000986 <HAL_GPIO_Init+0x242>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a4f      	ldr	r2, [pc, #316]	; (8000a7c <HAL_GPIO_Init+0x338>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d01f      	beq.n	8000982 <HAL_GPIO_Init+0x23e>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a4e      	ldr	r2, [pc, #312]	; (8000a80 <HAL_GPIO_Init+0x33c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d019      	beq.n	800097e <HAL_GPIO_Init+0x23a>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a4d      	ldr	r2, [pc, #308]	; (8000a84 <HAL_GPIO_Init+0x340>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d013      	beq.n	800097a <HAL_GPIO_Init+0x236>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a4c      	ldr	r2, [pc, #304]	; (8000a88 <HAL_GPIO_Init+0x344>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d00d      	beq.n	8000976 <HAL_GPIO_Init+0x232>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4b      	ldr	r2, [pc, #300]	; (8000a8c <HAL_GPIO_Init+0x348>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d007      	beq.n	8000972 <HAL_GPIO_Init+0x22e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4a      	ldr	r2, [pc, #296]	; (8000a90 <HAL_GPIO_Init+0x34c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d101      	bne.n	800096e <HAL_GPIO_Init+0x22a>
 800096a:	2306      	movs	r3, #6
 800096c:	e00c      	b.n	8000988 <HAL_GPIO_Init+0x244>
 800096e:	2307      	movs	r3, #7
 8000970:	e00a      	b.n	8000988 <HAL_GPIO_Init+0x244>
 8000972:	2305      	movs	r3, #5
 8000974:	e008      	b.n	8000988 <HAL_GPIO_Init+0x244>
 8000976:	2304      	movs	r3, #4
 8000978:	e006      	b.n	8000988 <HAL_GPIO_Init+0x244>
 800097a:	2303      	movs	r3, #3
 800097c:	e004      	b.n	8000988 <HAL_GPIO_Init+0x244>
 800097e:	2302      	movs	r3, #2
 8000980:	e002      	b.n	8000988 <HAL_GPIO_Init+0x244>
 8000982:	2301      	movs	r3, #1
 8000984:	e000      	b.n	8000988 <HAL_GPIO_Init+0x244>
 8000986:	2300      	movs	r3, #0
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	f002 0203 	and.w	r2, r2, #3
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	4093      	lsls	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000998:	4937      	ldr	r1, [pc, #220]	; (8000a78 <HAL_GPIO_Init+0x334>)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	089b      	lsrs	r3, r3, #2
 800099e:	3302      	adds	r3, #2
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <HAL_GPIO_Init+0x350>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009ca:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <HAL_GPIO_Init+0x350>)
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <HAL_GPIO_Init+0x350>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	43db      	mvns	r3, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009f4:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <HAL_GPIO_Init+0x350>)
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <HAL_GPIO_Init+0x350>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	43db      	mvns	r3, r3
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_GPIO_Init+0x350>)
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_GPIO_Init+0x350>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <HAL_GPIO_Init+0x350>)
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f47f ae78 	bne.w	8000754 <HAL_GPIO_Init+0x10>
  }
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	371c      	adds	r7, #28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	48000400 	.word	0x48000400
 8000a80:	48000800 	.word	0x48000800
 8000a84:	48000c00 	.word	0x48000c00
 8000a88:	48001000 	.word	0x48001000
 8000a8c:	48001400 	.word	0x48001400
 8000a90:	48001800 	.word	0x48001800
 8000a94:	40010400 	.word	0x40010400

08000a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	807b      	strh	r3, [r7, #2]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aa8:	787b      	ldrb	r3, [r7, #1]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aae:	887a      	ldrh	r2, [r7, #2]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ab4:	e002      	b.n	8000abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ab6:	887a      	ldrh	r2, [r7, #2]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000af2:	d130      	bne.n	8000b56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b00:	d038      	beq.n	8000b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2232      	movs	r2, #50	; 0x32
 8000b18:	fb02 f303 	mul.w	r3, r2, r3
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0c9b      	lsrs	r3, r3, #18
 8000b24:	3301      	adds	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b28:	e002      	b.n	8000b30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3c:	d102      	bne.n	8000b44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1f2      	bne.n	8000b2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b50:	d110      	bne.n	8000b74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b52:	2303      	movs	r3, #3
 8000b54:	e00f      	b.n	8000b76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b62:	d007      	beq.n	8000b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b6c:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40007000 	.word	0x40007000
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	431bde83 	.word	0x431bde83

08000b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e3d4      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ba2:	4ba1      	ldr	r3, [pc, #644]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
 8000baa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bac:	4b9e      	ldr	r3, [pc, #632]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 80e4 	beq.w	8000d8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d007      	beq.n	8000bda <HAL_RCC_OscConfig+0x4a>
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	2b0c      	cmp	r3, #12
 8000bce:	f040 808b 	bne.w	8000ce8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	f040 8087 	bne.w	8000ce8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bda:	4b93      	ldr	r3, [pc, #588]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x62>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e3ac      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	4b8c      	ldr	r3, [pc, #560]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d004      	beq.n	8000c0c <HAL_RCC_OscConfig+0x7c>
 8000c02:	4b89      	ldr	r3, [pc, #548]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c0a:	e005      	b.n	8000c18 <HAL_RCC_OscConfig+0x88>
 8000c0c:	4b86      	ldr	r3, [pc, #536]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c12:	091b      	lsrs	r3, r3, #4
 8000c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d223      	bcs.n	8000c64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fd5d 	bl	80016e0 <RCC_SetFlashLatencyFromMSIRange>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e38d      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c30:	4b7d      	ldr	r3, [pc, #500]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a7c      	ldr	r2, [pc, #496]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c36:	f043 0308 	orr.w	r3, r3, #8
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	4b7a      	ldr	r3, [pc, #488]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4977      	ldr	r1, [pc, #476]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c4e:	4b76      	ldr	r3, [pc, #472]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	4972      	ldr	r1, [pc, #456]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	604b      	str	r3, [r1, #4]
 8000c62:	e025      	b.n	8000cb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c64:	4b70      	ldr	r3, [pc, #448]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a6f      	ldr	r2, [pc, #444]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b6d      	ldr	r3, [pc, #436]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a1b      	ldr	r3, [r3, #32]
 8000c7c:	496a      	ldr	r1, [pc, #424]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c82:	4b69      	ldr	r3, [pc, #420]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	4965      	ldr	r1, [pc, #404]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000c92:	4313      	orrs	r3, r2
 8000c94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d109      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fd1d 	bl	80016e0 <RCC_SetFlashLatencyFromMSIRange>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e34d      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000cb0:	f000 fc36 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	4b5c      	ldr	r3, [pc, #368]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	495a      	ldr	r1, [pc, #360]	; (8000e2c <HAL_RCC_OscConfig+0x29c>)
 8000cc2:	5ccb      	ldrb	r3, [r1, r3]
 8000cc4:	f003 031f 	and.w	r3, r3, #31
 8000cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ccc:	4a58      	ldr	r2, [pc, #352]	; (8000e30 <HAL_RCC_OscConfig+0x2a0>)
 8000cce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000cd0:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <HAL_RCC_OscConfig+0x2a4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb33 	bl	8000340 <HAL_InitTick>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d052      	beq.n	8000d8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	e331      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d032      	beq.n	8000d56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cf0:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cfc:	f7ff fc34 	bl	8000568 <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d02:	e008      	b.n	8000d16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d04:	f7ff fc30 	bl	8000568 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d901      	bls.n	8000d16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e31a      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d16:	4b44      	ldr	r3, [pc, #272]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f0      	beq.n	8000d04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d22:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a40      	ldr	r2, [pc, #256]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	493b      	ldr	r1, [pc, #236]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d40:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	4936      	ldr	r1, [pc, #216]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e01a      	b.n	8000d8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d62:	f7ff fc01 	bl	8000568 <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fbfd 	bl	8000568 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e2e7      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f0      	bne.n	8000d6a <HAL_RCC_OscConfig+0x1da>
 8000d88:	e000      	b.n	8000d8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d074      	beq.n	8000e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d005      	beq.n	8000daa <HAL_RCC_OscConfig+0x21a>
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	2b0c      	cmp	r3, #12
 8000da2:	d10e      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d10b      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d064      	beq.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d160      	bne.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e2c4      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dca:	d106      	bne.n	8000dda <HAL_RCC_OscConfig+0x24a>
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e01d      	b.n	8000e16 <HAL_RCC_OscConfig+0x286>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de2:	d10c      	bne.n	8000dfe <HAL_RCC_OscConfig+0x26e>
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e00b      	b.n	8000e16 <HAL_RCC_OscConfig+0x286>
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_RCC_OscConfig+0x298>)
 8000e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d01c      	beq.n	8000e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fba3 	bl	8000568 <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e24:	e011      	b.n	8000e4a <HAL_RCC_OscConfig+0x2ba>
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	08001db4 	.word	0x08001db4
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fb96 	bl	8000568 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e280      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e4a:	4baf      	ldr	r3, [pc, #700]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0x2a8>
 8000e56:	e014      	b.n	8000e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e58:	f7ff fb86 	bl	8000568 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fb82 	bl	8000568 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e26c      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e72:	4ba5      	ldr	r3, [pc, #660]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x2d0>
 8000e7e:	e000      	b.n	8000e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d060      	beq.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d005      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x310>
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2b0c      	cmp	r3, #12
 8000e98:	d119      	bne.n	8000ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d116      	bne.n	8000ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ea0:	4b99      	ldr	r3, [pc, #612]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d005      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x328>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e249      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb8:	4b93      	ldr	r3, [pc, #588]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	061b      	lsls	r3, r3, #24
 8000ec6:	4990      	ldr	r1, [pc, #576]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ecc:	e040      	b.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d023      	beq.n	8000f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed6:	4b8c      	ldr	r3, [pc, #560]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a8b      	ldr	r2, [pc, #556]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fb41 	bl	8000568 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eea:	f7ff fb3d 	bl	8000568 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e227      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000efc:	4b82      	ldr	r3, [pc, #520]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f08:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	061b      	lsls	r3, r3, #24
 8000f16:	497c      	ldr	r1, [pc, #496]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
 8000f1c:	e018      	b.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1e:	4b7a      	ldr	r3, [pc, #488]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a79      	ldr	r2, [pc, #484]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fb1d 	bl	8000568 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f32:	f7ff fb19 	bl	8000568 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e203      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f44:	4b70      	ldr	r3, [pc, #448]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f0      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d03c      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d01c      	beq.n	8000f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f64:	4b68      	ldr	r3, [pc, #416]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f6a:	4a67      	ldr	r2, [pc, #412]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f74:	f7ff faf8 	bl	8000568 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff faf4 	bl	8000568 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1de      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f8e:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0ef      	beq.n	8000f7c <HAL_RCC_OscConfig+0x3ec>
 8000f9c:	e01b      	b.n	8000fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9e:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa4:	4a58      	ldr	r2, [pc, #352]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fae:	f7ff fadb 	bl	8000568 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb6:	f7ff fad7 	bl	8000568 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e1c1      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1ef      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80a6 	beq.w	8001130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000fe8:	4b47      	ldr	r3, [pc, #284]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10d      	bne.n	8001010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff8:	4a43      	ldr	r2, [pc, #268]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8000ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8001002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100c:	2301      	movs	r3, #1
 800100e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001010:	4b3e      	ldr	r3, [pc, #248]	; (800110c <HAL_RCC_OscConfig+0x57c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001018:	2b00      	cmp	r3, #0
 800101a:	d118      	bne.n	800104e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <HAL_RCC_OscConfig+0x57c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a3a      	ldr	r2, [pc, #232]	; (800110c <HAL_RCC_OscConfig+0x57c>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001028:	f7ff fa9e 	bl	8000568 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001030:	f7ff fa9a 	bl	8000568 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e184      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001042:	4b32      	ldr	r3, [pc, #200]	; (800110c <HAL_RCC_OscConfig+0x57c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d108      	bne.n	8001068 <HAL_RCC_OscConfig+0x4d8>
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8001058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105c:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001066:	e024      	b.n	80010b2 <HAL_RCC_OscConfig+0x522>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b05      	cmp	r3, #5
 800106e:	d110      	bne.n	8001092 <HAL_RCC_OscConfig+0x502>
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8001072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001076:	4a24      	ldr	r2, [pc, #144]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8001082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001090:	e00f      	b.n	80010b2 <HAL_RCC_OscConfig+0x522>
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 8001094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 80010a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 80010aa:	f023 0304 	bic.w	r3, r3, #4
 80010ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d016      	beq.n	80010e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ba:	f7ff fa55 	bl	8000568 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fa51 	bl	8000568 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e139      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_RCC_OscConfig+0x578>)
 80010da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0ed      	beq.n	80010c2 <HAL_RCC_OscConfig+0x532>
 80010e6:	e01a      	b.n	800111e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e8:	f7ff fa3e 	bl	8000568 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010ee:	e00f      	b.n	8001110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f0:	f7ff fa3a 	bl	8000568 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fe:	4293      	cmp	r3, r2
 8001100:	d906      	bls.n	8001110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e122      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000
 800110c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001110:	4b90      	ldr	r3, [pc, #576]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1e8      	bne.n	80010f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800111e:	7ffb      	ldrb	r3, [r7, #31]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d105      	bne.n	8001130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001124:	4b8b      	ldr	r3, [pc, #556]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	4a8a      	ldr	r2, [pc, #552]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 800112a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 8108 	beq.w	800134a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	2b02      	cmp	r3, #2
 8001140:	f040 80d0 	bne.w	80012e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001144:	4b83      	ldr	r3, [pc, #524]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	429a      	cmp	r2, r3
 8001156:	d130      	bne.n	80011ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	3b01      	subs	r3, #1
 8001164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001166:	429a      	cmp	r2, r3
 8001168:	d127      	bne.n	80011ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001174:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001176:	429a      	cmp	r2, r3
 8001178:	d11f      	bne.n	80011ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001184:	2a07      	cmp	r2, #7
 8001186:	bf14      	ite	ne
 8001188:	2201      	movne	r2, #1
 800118a:	2200      	moveq	r2, #0
 800118c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800118e:	4293      	cmp	r3, r2
 8001190:	d113      	bne.n	80011ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119c:	085b      	lsrs	r3, r3, #1
 800119e:	3b01      	subs	r3, #1
 80011a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d109      	bne.n	80011ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	085b      	lsrs	r3, r3, #1
 80011b2:	3b01      	subs	r3, #1
 80011b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d06e      	beq.n	8001298 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	d069      	beq.n	8001294 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80011c0:	4b64      	ldr	r3, [pc, #400]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80011cc:	4b61      	ldr	r3, [pc, #388]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0b7      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80011dc:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a5c      	ldr	r2, [pc, #368]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80011e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011e8:	f7ff f9be 	bl	8000568 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f0:	f7ff f9ba 	bl	8000568 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e0a4      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001202:	4b54      	ldr	r3, [pc, #336]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_RCC_OscConfig+0x7c8>)
 8001214:	4013      	ands	r3, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800121e:	3a01      	subs	r2, #1
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	4311      	orrs	r1, r2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001228:	0212      	lsls	r2, r2, #8
 800122a:	4311      	orrs	r1, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001230:	0852      	lsrs	r2, r2, #1
 8001232:	3a01      	subs	r2, #1
 8001234:	0552      	lsls	r2, r2, #21
 8001236:	4311      	orrs	r1, r2
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800123c:	0852      	lsrs	r2, r2, #1
 800123e:	3a01      	subs	r2, #1
 8001240:	0652      	lsls	r2, r2, #25
 8001242:	4311      	orrs	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001248:	0912      	lsrs	r2, r2, #4
 800124a:	0452      	lsls	r2, r2, #17
 800124c:	430a      	orrs	r2, r1
 800124e:	4941      	ldr	r1, [pc, #260]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001250:	4313      	orrs	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001254:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 800125a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800125e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001260:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4a3b      	ldr	r2, [pc, #236]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800126a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800126c:	f7ff f97c 	bl	8000568 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff f978 	bl	8000568 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e062      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001292:	e05a      	b.n	800134a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e059      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d152      	bne.n	800134a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2a      	ldr	r2, [pc, #168]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80012aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80012b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012bc:	f7ff f954 	bl	8000568 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c4:	f7ff f950 	bl	8000568 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e03a      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x734>
 80012e2:	e032      	b.n	800134a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b0c      	cmp	r3, #12
 80012e8:	d02d      	beq.n	8001346 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80012f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012f4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d105      	bne.n	800130e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001308:	f023 0303 	bic.w	r3, r3, #3
 800130c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 8001314:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131e:	f7ff f923 	bl	8000568 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff f91f 	bl	8000568 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e009      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_RCC_OscConfig+0x7c4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x796>
 8001344:	e001      	b.n	800134a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	f99d808c 	.word	0xf99d808c

0800135c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0c8      	b.n	8001502 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001370:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_RCC_ClockConfig+0x1b0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d910      	bls.n	80013a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_RCC_ClockConfig+0x1b0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 0207 	bic.w	r2, r3, #7
 8001386:	4961      	ldr	r1, [pc, #388]	; (800150c <HAL_RCC_ClockConfig+0x1b0>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_RCC_ClockConfig+0x1b0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0b0      	b.n	8001502 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d04c      	beq.n	8001446 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d107      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d121      	bne.n	8001404 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e09e      	b.n	8001502 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d107      	bne.n	80013dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d115      	bne.n	8001404 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e092      	b.n	8001502 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013e4:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d109      	bne.n	8001404 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e086      	b.n	8001502 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f4:	4b46      	ldr	r3, [pc, #280]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e07e      	b.n	8001502 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001404:	4b42      	ldr	r3, [pc, #264]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f023 0203 	bic.w	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	493f      	ldr	r1, [pc, #252]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 8001412:	4313      	orrs	r3, r2
 8001414:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001416:	f7ff f8a7 	bl	8000568 <HAL_GetTick>
 800141a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141c:	e00a      	b.n	8001434 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141e:	f7ff f8a3 	bl	8000568 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f241 3288 	movw	r2, #5000	; 0x1388
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e066      	b.n	8001502 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 020c 	and.w	r2, r3, #12
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	429a      	cmp	r2, r3
 8001444:	d1eb      	bne.n	800141e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	492c      	ldr	r1, [pc, #176]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_RCC_ClockConfig+0x1b0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d210      	bcs.n	8001494 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_RCC_ClockConfig+0x1b0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 0207 	bic.w	r2, r3, #7
 800147a:	4924      	ldr	r1, [pc, #144]	; (800150c <HAL_RCC_ClockConfig+0x1b0>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_RCC_ClockConfig+0x1b0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e036      	b.n	8001502 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4918      	ldr	r1, [pc, #96]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4910      	ldr	r1, [pc, #64]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d2:	f000 f825 	bl	8001520 <HAL_RCC_GetSysClockFreq>
 80014d6:	4602      	mov	r2, r0
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_RCC_ClockConfig+0x1b4>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	490c      	ldr	r1, [pc, #48]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	5ccb      	ldrb	r3, [r1, r3]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ff22 	bl	8000340 <HAL_InitTick>
 80014fc:	4603      	mov	r3, r0
 80014fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001500:	7afb      	ldrb	r3, [r7, #11]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40022000 	.word	0x40022000
 8001510:	40021000 	.word	0x40021000
 8001514:	08001db4 	.word	0x08001db4
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <HAL_RCC_GetSysClockFreq+0x108>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001538:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_RCC_GetSysClockFreq+0x108>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x34>
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d121      	bne.n	8001592 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d11e      	bne.n	8001592 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001554:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_RCC_GetSysClockFreq+0x108>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d107      	bne.n	8001570 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_RCC_GetSysClockFreq+0x108>)
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	e005      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_RCC_GetSysClockFreq+0x108>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800157c:	4a2b      	ldr	r2, [pc, #172]	; (800162c <HAL_RCC_GetSysClockFreq+0x10c>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10d      	bne.n	80015a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d102      	bne.n	800159e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_RCC_GetSysClockFreq+0x110>)
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	e004      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_RCC_GetSysClockFreq+0x114>)
 80015a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d134      	bne.n	8001618 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_RCC_GetSysClockFreq+0x108>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d003      	beq.n	80015c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d003      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0xac>
 80015c4:	e005      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_RCC_GetSysClockFreq+0x110>)
 80015c8:	617b      	str	r3, [r7, #20]
      break;
 80015ca:	e005      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_GetSysClockFreq+0x114>)
 80015ce:	617b      	str	r3, [r7, #20]
      break;
 80015d0:	e002      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	617b      	str	r3, [r7, #20]
      break;
 80015d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_RCC_GetSysClockFreq+0x108>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	3301      	adds	r3, #1
 80015e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_RCC_GetSysClockFreq+0x108>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	fb02 f203 	mul.w	r2, r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_RCC_GetSysClockFreq+0x108>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	0e5b      	lsrs	r3, r3, #25
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	3301      	adds	r3, #1
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001618:	69bb      	ldr	r3, [r7, #24]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	08001dcc 	.word	0x08001dcc
 8001630:	00f42400 	.word	0x00f42400
 8001634:	007a1200 	.word	0x007a1200

08001638 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_RCC_GetHCLKFreq+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000

08001650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001654:	f7ff fff0 	bl	8001638 <HAL_RCC_GetHCLKFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	4904      	ldr	r1, [pc, #16]	; (8001678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	08001dc4 	.word	0x08001dc4

0800167c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	220f      	movs	r2, #15
 800168a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_GetClockConfig+0x5c>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0203 	and.w	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_RCC_GetClockConfig+0x5c>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_RCC_GetClockConfig+0x5c>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_GetClockConfig+0x5c>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_RCC_GetClockConfig+0x60>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0207 	and.w	r2, r3, #7
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40022000 	.word	0x40022000

080016e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016f8:	f7ff f9e6 	bl	8000ac8 <HAL_PWREx_GetVoltageRange>
 80016fc:	6178      	str	r0, [r7, #20]
 80016fe:	e014      	b.n	800172a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	; 0x58
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001718:	f7ff f9d6 	bl	8000ac8 <HAL_PWREx_GetVoltageRange>
 800171c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001728:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001730:	d10b      	bne.n	800174a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b80      	cmp	r3, #128	; 0x80
 8001736:	d919      	bls.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2ba0      	cmp	r3, #160	; 0xa0
 800173c:	d902      	bls.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800173e:	2302      	movs	r3, #2
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e013      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001744:	2301      	movs	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	e010      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b80      	cmp	r3, #128	; 0x80
 800174e:	d902      	bls.n	8001756 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001750:	2303      	movs	r3, #3
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	e00a      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b80      	cmp	r3, #128	; 0x80
 800175a:	d102      	bne.n	8001762 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800175c:	2302      	movs	r3, #2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e004      	b.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b70      	cmp	r3, #112	; 0x70
 8001766:	d101      	bne.n	800176c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001768:	2301      	movs	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 0207 	bic.w	r2, r3, #7
 8001774:	4909      	ldr	r1, [pc, #36]	; (800179c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	40022000 	.word	0x40022000

080017a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e049      	b.n	8001846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d106      	bne.n	80017cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f841 	bl	800184e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3304      	adds	r3, #4
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f000 f9f8 	bl	8001bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d001      	beq.n	800187c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e04f      	b.n	800191c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <HAL_TIM_Base_Start_IT+0xc4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d01d      	beq.n	80018da <HAL_TIM_Base_Start_IT+0x76>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a6:	d018      	beq.n	80018da <HAL_TIM_Base_Start_IT+0x76>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1f      	ldr	r2, [pc, #124]	; (800192c <HAL_TIM_Base_Start_IT+0xc8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_TIM_Base_Start_IT+0x76>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_TIM_Base_Start_IT+0xcc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00e      	beq.n	80018da <HAL_TIM_Base_Start_IT+0x76>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <HAL_TIM_Base_Start_IT+0xd0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d009      	beq.n	80018da <HAL_TIM_Base_Start_IT+0x76>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <HAL_TIM_Base_Start_IT+0xd4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d004      	beq.n	80018da <HAL_TIM_Base_Start_IT+0x76>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_TIM_Base_Start_IT+0xd8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d115      	bne.n	8001906 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_TIM_Base_Start_IT+0xdc>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b06      	cmp	r3, #6
 80018ea:	d015      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0xb4>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f2:	d011      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001904:	e008      	b.n	8001918 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0201 	orr.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e000      	b.n	800191a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001918:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40012c00 	.word	0x40012c00
 800192c:	40000400 	.word	0x40000400
 8001930:	40000800 	.word	0x40000800
 8001934:	40000c00 	.word	0x40000c00
 8001938:	40013400 	.word	0x40013400
 800193c:	40014000 	.word	0x40014000
 8001940:	00010007 	.word	0x00010007

08001944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b02      	cmp	r3, #2
 8001958:	d122      	bne.n	80019a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b02      	cmp	r3, #2
 8001966:	d11b      	bne.n	80019a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0202 	mvn.w	r2, #2
 8001970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f905 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 800198c:	e005      	b.n	800199a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8f7 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f908 	bl	8001baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d122      	bne.n	80019f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d11b      	bne.n	80019f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0204 	mvn.w	r2, #4
 80019c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f8db 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 80019e0:	e005      	b.n	80019ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8cd 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f8de 	bl	8001baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d122      	bne.n	8001a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d11b      	bne.n	8001a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0208 	mvn.w	r2, #8
 8001a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8b1 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001a34:	e005      	b.n	8001a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f8a3 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8b4 	bl	8001baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d122      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b10      	cmp	r3, #16
 8001a62:	d11b      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f06f 0210 	mvn.w	r2, #16
 8001a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2208      	movs	r2, #8
 8001a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f887 	bl	8001b96 <HAL_TIM_IC_CaptureCallback>
 8001a88:	e005      	b.n	8001a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f879 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f88a 	bl	8001baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d10e      	bne.n	8001ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0201 	mvn.w	r2, #1
 8001ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe fc00 	bl	80002c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	2b80      	cmp	r3, #128	; 0x80
 8001ad4:	d10e      	bne.n	8001af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae0:	2b80      	cmp	r3, #128	; 0x80
 8001ae2:	d107      	bne.n	8001af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f914 	bl	8001d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b02:	d10e      	bne.n	8001b22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0e:	2b80      	cmp	r3, #128	; 0x80
 8001b10:	d107      	bne.n	8001b22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f907 	bl	8001d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d10e      	bne.n	8001b4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3a:	2b40      	cmp	r3, #64	; 0x40
 8001b3c:	d107      	bne.n	8001b4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f838 	bl	8001bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d10e      	bne.n	8001b7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	d107      	bne.n	8001b7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f06f 0220 	mvn.w	r2, #32
 8001b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f8c7 	bl	8001d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a40      	ldr	r2, [pc, #256]	; (8001ce8 <TIM_Base_SetConfig+0x114>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <TIM_Base_SetConfig+0x40>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf2:	d00f      	beq.n	8001c14 <TIM_Base_SetConfig+0x40>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a3d      	ldr	r2, [pc, #244]	; (8001cec <TIM_Base_SetConfig+0x118>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00b      	beq.n	8001c14 <TIM_Base_SetConfig+0x40>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a3c      	ldr	r2, [pc, #240]	; (8001cf0 <TIM_Base_SetConfig+0x11c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d007      	beq.n	8001c14 <TIM_Base_SetConfig+0x40>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3b      	ldr	r2, [pc, #236]	; (8001cf4 <TIM_Base_SetConfig+0x120>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d003      	beq.n	8001c14 <TIM_Base_SetConfig+0x40>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3a      	ldr	r2, [pc, #232]	; (8001cf8 <TIM_Base_SetConfig+0x124>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d108      	bne.n	8001c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a2f      	ldr	r2, [pc, #188]	; (8001ce8 <TIM_Base_SetConfig+0x114>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <TIM_Base_SetConfig+0x9a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d01b      	beq.n	8001c6e <TIM_Base_SetConfig+0x9a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a2c      	ldr	r2, [pc, #176]	; (8001cec <TIM_Base_SetConfig+0x118>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d017      	beq.n	8001c6e <TIM_Base_SetConfig+0x9a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <TIM_Base_SetConfig+0x11c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <TIM_Base_SetConfig+0x9a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <TIM_Base_SetConfig+0x120>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00f      	beq.n	8001c6e <TIM_Base_SetConfig+0x9a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <TIM_Base_SetConfig+0x124>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00b      	beq.n	8001c6e <TIM_Base_SetConfig+0x9a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <TIM_Base_SetConfig+0x128>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <TIM_Base_SetConfig+0x9a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <TIM_Base_SetConfig+0x12c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d003      	beq.n	8001c6e <TIM_Base_SetConfig+0x9a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <TIM_Base_SetConfig+0x130>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d108      	bne.n	8001c80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <TIM_Base_SetConfig+0x114>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00f      	beq.n	8001ccc <TIM_Base_SetConfig+0xf8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <TIM_Base_SetConfig+0x124>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00b      	beq.n	8001ccc <TIM_Base_SetConfig+0xf8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <TIM_Base_SetConfig+0x128>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <TIM_Base_SetConfig+0xf8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <TIM_Base_SetConfig+0x12c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d003      	beq.n	8001ccc <TIM_Base_SetConfig+0xf8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <TIM_Base_SetConfig+0x130>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d103      	bne.n	8001cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	615a      	str	r2, [r3, #20]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	40000400 	.word	0x40000400
 8001cf0:	40000800 	.word	0x40000800
 8001cf4:	40000c00 	.word	0x40000c00
 8001cf8:	40013400 	.word	0x40013400
 8001cfc:	40014000 	.word	0x40014000
 8001d00:	40014400 	.word	0x40014400
 8001d04:	40014800 	.word	0x40014800

08001d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <__libc_init_array>:
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	4d0d      	ldr	r5, [pc, #52]	; (8001d7c <__libc_init_array+0x38>)
 8001d48:	4c0d      	ldr	r4, [pc, #52]	; (8001d80 <__libc_init_array+0x3c>)
 8001d4a:	1b64      	subs	r4, r4, r5
 8001d4c:	10a4      	asrs	r4, r4, #2
 8001d4e:	2600      	movs	r6, #0
 8001d50:	42a6      	cmp	r6, r4
 8001d52:	d109      	bne.n	8001d68 <__libc_init_array+0x24>
 8001d54:	4d0b      	ldr	r5, [pc, #44]	; (8001d84 <__libc_init_array+0x40>)
 8001d56:	4c0c      	ldr	r4, [pc, #48]	; (8001d88 <__libc_init_array+0x44>)
 8001d58:	f000 f820 	bl	8001d9c <_init>
 8001d5c:	1b64      	subs	r4, r4, r5
 8001d5e:	10a4      	asrs	r4, r4, #2
 8001d60:	2600      	movs	r6, #0
 8001d62:	42a6      	cmp	r6, r4
 8001d64:	d105      	bne.n	8001d72 <__libc_init_array+0x2e>
 8001d66:	bd70      	pop	{r4, r5, r6, pc}
 8001d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d6c:	4798      	blx	r3
 8001d6e:	3601      	adds	r6, #1
 8001d70:	e7ee      	b.n	8001d50 <__libc_init_array+0xc>
 8001d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d76:	4798      	blx	r3
 8001d78:	3601      	adds	r6, #1
 8001d7a:	e7f2      	b.n	8001d62 <__libc_init_array+0x1e>
 8001d7c:	08001dfc 	.word	0x08001dfc
 8001d80:	08001dfc 	.word	0x08001dfc
 8001d84:	08001dfc 	.word	0x08001dfc
 8001d88:	08001e00 	.word	0x08001e00

08001d8c <memset>:
 8001d8c:	4402      	add	r2, r0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d100      	bne.n	8001d96 <memset+0xa>
 8001d94:	4770      	bx	lr
 8001d96:	f803 1b01 	strb.w	r1, [r3], #1
 8001d9a:	e7f9      	b.n	8001d90 <memset+0x4>

08001d9c <_init>:
 8001d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9e:	bf00      	nop
 8001da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001da2:	bc08      	pop	{r3}
 8001da4:	469e      	mov	lr, r3
 8001da6:	4770      	bx	lr

08001da8 <_fini>:
 8001da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001daa:	bf00      	nop
 8001dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dae:	bc08      	pop	{r3}
 8001db0:	469e      	mov	lr, r3
 8001db2:	4770      	bx	lr
